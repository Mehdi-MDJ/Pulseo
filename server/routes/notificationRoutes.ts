/**
 * ==============================================================================
 * NurseLink AI - Routes de Notifications
 * ==============================================================================
 *
 * Routes API pour la gestion des notifications dans l'app mobile
 * Permet aux infirmiers de r√©cup√©rer et g√©rer leurs notifications
 * ==============================================================================
 */

import { Router } from 'express';
import { notificationService } from '../services/notificationService';
import { localAuthMiddleware } from '../middleware/localAuthMiddleware';

const router = Router();

/**
 * GET /api/notifications
 * R√©cup√®re les notifications d'un infirmier connect√©
 */
router.get('/', localAuthMiddleware, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: "Utilisateur non authentifi√©" });
    }

    // TODO: R√©cup√©rer l'ID infirmier depuis le profil utilisateur
    const nurseId = parseInt(userId.replace('user-', '')) || 1; // Simulation

    const limit = parseInt(req.query.limit as string) || 20;
    const notifications = await notificationService.getNurseNotifications(nurseId, limit);

    res.json({
      success: true,
      notifications,
      total: notifications.length
    });

  } catch (error) {
    console.error("[NotificationRoutes] Erreur r√©cup√©ration notifications:", error);
    res.status(500).json({ error: "Erreur serveur lors de la r√©cup√©ration des notifications" });
  }
});

/**
 * GET /api/notifications/stats
 * R√©cup√®re les statistiques de notifications d'un infirmier
 */
router.get('/stats', localAuthMiddleware, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: "Utilisateur non authentifi√©" });
    }

    const nurseId = parseInt(userId.replace('user-', '')) || 1; // Simulation
    const stats = await notificationService.getNotificationStats(nurseId);

    res.json({
      success: true,
      stats
    });

  } catch (error) {
    console.error("[NotificationRoutes] Erreur r√©cup√©ration stats:", error);
    res.status(500).json({ error: "Erreur serveur lors de la r√©cup√©ration des statistiques" });
  }
});

/**
 * PUT /api/notifications/:id/read
 * Marque une notification comme lue
 */
router.put('/:id/read', localAuthMiddleware, async (req, res) => {
  try {
    const userId = req.user?.id;
    const notificationId = parseInt(req.params.id);

    if (!userId) {
      return res.status(401).json({ error: "Utilisateur non authentifi√©" });
    }

    if (isNaN(notificationId)) {
      return res.status(400).json({ error: "ID de notification invalide" });
    }

    const nurseId = parseInt(userId.replace('user-', '')) || 1; // Simulation
    const success = await notificationService.markAsRead(notificationId, nurseId);

    if (!success) {
      return res.status(404).json({ error: "Notification non trouv√©e" });
    }

    res.json({
      success: true,
      message: "Notification marqu√©e comme lue"
    });

  } catch (error) {
    console.error("[NotificationRoutes] Erreur marquage notification:", error);
    res.status(500).json({ error: "Erreur serveur lors du marquage de la notification" });
  }
});

/**
 * PUT /api/notifications/read-all
 * Marque toutes les notifications d'un infirmier comme lues
 */
router.put('/read-all', localAuthMiddleware, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: "Utilisateur non authentifi√©" });
    }

    const nurseId = parseInt(userId.replace('user-', '')) || 1; // Simulation
    await notificationService.markAllAsRead(nurseId);

    res.json({
      success: true,
      message: "Toutes les notifications marqu√©es comme lues"
    });

  } catch (error) {
    console.error("[NotificationRoutes] Erreur marquage notifications:", error);
    res.status(500).json({ error: "Erreur serveur lors du marquage des notifications" });
  }
});

/**
 * DELETE /api/notifications/:id
 * Supprime une notification
 */
router.delete('/:id', localAuthMiddleware, async (req, res) => {
  try {
    const userId = req.user?.id;
    const notificationId = parseInt(req.params.id);

    if (!userId) {
      return res.status(401).json({ error: "Utilisateur non authentifi√©" });
    }

    if (isNaN(notificationId)) {
      return res.status(400).json({ error: "ID de notification invalide" });
    }

    // TODO: Impl√©menter la suppression de notification
    console.log(`üóëÔ∏è Suppression notification ${notificationId} pour utilisateur ${userId}`);

    res.json({
      success: true,
      message: "Notification supprim√©e"
    });

  } catch (error) {
    console.error("[NotificationRoutes] Erreur suppression notification:", error);
    res.status(500).json({ error: "Erreur serveur lors de la suppression de la notification" });
  }
});

/**
 * POST /api/notifications/test
 * Route de test pour cr√©er une notification de d√©monstration
 */
router.post('/test', localAuthMiddleware, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: "Utilisateur non authentifi√©" });
    }

    const nurseId = parseInt(userId.replace('user-', '')) || 1; // Simulation

    // Cr√©er une notification de test
    const testNotification = await notificationService.createNotification({
      nurseId,
      missionId: 1,
      type: 'new_mission_match',
      title: 'Mission de test disponible',
      message: 'Une nouvelle mission correspondant √† votre profil est disponible !',
      score: 85,
      distance: 12.5,
      urgency: 'high',
      metadata: {
        test: true,
        timestamp: new Date().toISOString()
      }
    });

    res.json({
      success: true,
      message: "Notification de test cr√©√©e",
      notification: testNotification
    });

  } catch (error) {
    console.error("[NotificationRoutes] Erreur cr√©ation notification test:", error);
    res.status(500).json({ error: "Erreur serveur lors de la cr√©ation de la notification de test" });
  }
});

export default router;
