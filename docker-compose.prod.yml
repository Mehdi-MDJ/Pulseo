# ==============================================================================
# NurseLink AI - Docker Compose Production
# ==============================================================================
#
# Configuration complète pour la production
# Inclut l'application, la base de données, Redis, et les outils de monitoring
# ==============================================================================

version: '3.8'

services:
  # Application principale
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nurselink-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://nurselink:password@postgres:5432/nurselink_ai
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=https://nurselink.ai
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_ID=${GITHUB_ID}
      - GITHUB_SECRET=${GITHUB_SECRET}
      - EMAIL_SERVER_HOST=${EMAIL_SERVER_HOST}
      - EMAIL_SERVER_PORT=${EMAIL_SERVER_PORT}
      - EMAIL_SERVER_USER=${EMAIL_SERVER_USER}
      - EMAIL_SERVER_PASSWORD=${EMAIL_SERVER_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=info
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nurselink-network
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: nurselink-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=nurselink_ai
      - POSTGRES_USER=nurselink
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - nurselink-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nurselink -d nurselink_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: nurselink-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - nurselink-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nurselink-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - nurselink-network

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nurselink-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nurselink-network

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: nurselink-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - nurselink-network

  # Backup automatique
  backup:
    image: postgres:15-alpine
    container_name: nurselink-backup
    restart: "no"
    environment:
      - POSTGRES_PASSWORD=password
    volumes:
      - ./scripts/backup.sh:/backup.sh
      - backup-data:/backups
    command: ["/bin/sh", "/backup.sh"]
    depends_on:
      - postgres
    networks:
      - nurselink-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  backup-data:
    driver: local

networks:
  nurselink-network:
    driver: bridge
