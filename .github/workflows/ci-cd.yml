name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  # ==============================================================================
  # Tests et Validation
  # ==============================================================================
  test:
    name: Tests et Validation
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nurselink_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          cp env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/nurselink_test" >> .env
          echo "NEXTAUTH_SECRET=test-secret-key-for-ci-cd" >> .env
          echo "NEXTAUTH_URL=http://localhost:5000" >> .env

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nurselink_test

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()

  # ==============================================================================
  # Build et Artifacts
  # ==============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Create Docker image
        run: |
          docker build -t nurselink-ai:${{ github.sha }} .
          docker tag nurselink-ai:${{ github.sha }} nurselink-ai:latest

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            generated/
            package.json
            package-lock.json

  # ==============================================================================
  # Déploiement Staging
  # ==============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Ajoute ici ta logique de déploiement staging
          # Exemple: AWS ECS, Google Cloud Run, etc.

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Tests de base pour vérifier que l'app fonctionne

      - name: Notify deployment
        run: |
          echo "Staging deployment completed successfully!"

  # ==============================================================================
  # Déploiement Production
  # ==============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Create backup
        run: |
          echo "Creating database backup before deployment..."
          # Script de backup de la base de données

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Ajoute ici ta logique de déploiement production

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          npx prisma migrate deploy

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Vérifications que l'app fonctionne correctement

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully!"

  # ==============================================================================
  # Security Scanning
  # ==============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:5000'

  # ==============================================================================
  # Performance Testing
  # ==============================================================================
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: .lighthouseci/
