#!/usr/bin/env tsx

/**
 * ==============================================================================
 * NurseLink AI - Script de Migration Utilisateurs
 * ==============================================================================
 *
 * Migration des utilisateurs de l'ancien syst√®me vers NextAuth.js v5 + Prisma
 * Transfert s√©curis√© des donn√©es utilisateurs
 * ==============================================================================
 */

import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

interface MigrationStats {
  total: number;
  migrated: number;
  skipped: number;
  errors: number;
}

/**
 * Fonction de migration des utilisateurs
 */
async function migrateUsers(): Promise<MigrationStats> {
  console.log("üîÑ D√©but de la migration des utilisateurs...");

  const stats: MigrationStats = {
    total: 0,
    migrated: 0,
    skipped: 0,
    errors: 0,
  };

  try {
    // Pour l'instant, on cr√©e des utilisateurs de test
    // TODO: Impl√©menter la vraie migration depuis l'ancienne base

    const testUsers = [
      {
        email: "nurse@nurselink.ai",
        name: "Marie Dubois",
        role: "NURSE" as const,
      },
      {
        email: "establishment@nurselink.ai",
        name: "H√¥pital Saint-Joseph",
        role: "ESTABLISHMENT" as const,
      },
      {
        email: "admin@nurselink.ai",
        name: "Administrateur",
        role: "ADMIN" as const,
      },
    ];

    stats.total = testUsers.length;

    for (const testUser of testUsers) {
      try {
        // V√©rifier si l'utilisateur existe d√©j√†
        const existingUser = await prisma.user.findUnique({
          where: { email: testUser.email },
        });

        if (existingUser) {
          console.log(`‚è≠Ô∏è  Utilisateur ${testUser.email} d√©j√† existant, ignor√©`);
          stats.skipped++;
          continue;
        }

        // Cr√©er le nouvel utilisateur
        const newUser = await prisma.user.create({
          data: {
            email: testUser.email,
            name: testUser.name,
            role: testUser.role,
            emailVerified: new Date(),
          },
        });

        console.log(`‚úÖ Utilisateur cr√©√©: ${newUser.email} (${newUser.role})`);
        stats.migrated++;

        // Cr√©er le profil correspondant selon le r√¥le
        if (newUser.role === "NURSE") {
          await prisma.nurseProfile.create({
            data: {
              userId: newUser.id,
              specializations: ["Urgences", "Cardiologie"],
              experience: 5,
              certifications: ["DEI", "BLS"],
              rating: 4.8,
              missionsCompleted: 127,
              level: 8,
              rank: "Expert",
            },
          });
          console.log(`üë®‚Äç‚öïÔ∏è  Profil infirmier cr√©√© pour: ${newUser.email}`);
        } else if (newUser.role === "ESTABLISHMENT") {
          await prisma.establishmentProfile.create({
            data: {
              userId: newUser.id,
              name: "H√¥pital Saint-Joseph",
              type: "HOSPITAL",
              address: "123 Rue de la Sant√©, 75001 Paris",
              specialties: ["Cardiologie", "Neurologie", "P√©diatrie"],
              capacity: 500,
              description: "√âtablissement de sant√© de r√©f√©rence",
            },
          });
          console.log(`üè• Profil √©tablissement cr√©√© pour: ${newUser.email}`);
        }

      } catch (error) {
        console.error(`‚ùå Erreur cr√©ation utilisateur ${testUser.email}:`, error);
        stats.errors++;
      }
    }

    console.log("\nüìà Statistiques de migration:");
    console.log(`   Total: ${stats.total}`);
    console.log(`   Cr√©√©s: ${stats.migrated}`);
    console.log(`   Ignor√©s: ${stats.skipped}`);
    console.log(`   Erreurs: ${stats.errors}`);

    return stats;

  } catch (error) {
    console.error("‚ùå Erreur lors de la migration:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Fonction de validation de la migration
 */
async function validateMigration(): Promise<void> {
  console.log("\nüîç Validation de la migration...");

  const newUsers = await prisma.user.findMany({
    include: {
      nurseProfile: true,
      establishmentProfile: true,
    },
  });

  console.log(`‚úÖ ${newUsers.length} utilisateurs dans la base`);

  // V√©rifier les profils
  const nurses = newUsers.filter(u => u.role === "NURSE");
  const establishments = newUsers.filter(u => u.role === "ESTABLISHMENT");
  const admins = newUsers.filter(u => u.role === "ADMIN");

  console.log(`üë®‚Äç‚öïÔ∏è  Infirmiers: ${nurses.length}`);
  console.log(`üè• √âtablissements: ${establishments.length}`);
  console.log(`üëë Admins: ${admins.length}`);

  // V√©rifier les profils cr√©√©s
  const nursesWithProfile = nurses.filter(n => n.nurseProfile);
  const establishmentsWithProfile = establishments.filter(e => e.establishmentProfile);

  console.log(`‚úÖ Profils infirmiers cr√©√©s: ${nursesWithProfile.length}/${nurses.length}`);
  console.log(`‚úÖ Profils √©tablissements cr√©√©s: ${establishmentsWithProfile.length}/${establishments.length}`);
}

/**
 * Fonction principale
 */
async function main() {
  try {
    console.log("üöÄ Script de migration NurseLink AI");
    console.log("=====================================");

    // V√©rifier la connexion √† la base de donn√©es
    await prisma.$connect();
    console.log("‚úÖ Connexion √† la base de donn√©es √©tablie");

    // Effectuer la migration
    const stats = await migrateUsers();

    // Valider la migration
    await validateMigration();

    if (stats.errors === 0) {
      console.log("\nüéâ Migration termin√©e avec succ√®s!");
    } else {
      console.log(`\n‚ö†Ô∏è  Migration termin√©e avec ${stats.errors} erreurs`);
    }

  } catch (error) {
    console.error("‚ùå Erreur fatale lors de la migration:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cution du script
if (require.main === module) {
  main();
}
