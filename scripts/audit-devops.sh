#!/bin/bash

# ==============================================================================
# NurseLink AI - Audit DevOps Complet
# ==============================================================================
#
# Script d'audit pour analyser l'√©tat du projet
# ==============================================================================

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç AUDIT DEVOPS COMPLET - NURSELINK AI${NC}"
echo "================================================"
echo ""

# ==============================================================================
# 1. AUDIT ENVIRONNEMENT
# ==============================================================================
echo -e "${YELLOW}üìã 1. AUDIT ENVIRONNEMENT${NC}"
echo "----------------------------------------"

echo -e "Shell: ${GREEN}$SHELL${NC}"
echo -e "Node.js: ${GREEN}$(node --version 2>/dev/null || echo 'Non install√©')${NC}"
echo -e "npm: ${GREEN}$(npm --version 2>/dev/null || echo 'Non install√©')${NC}"
echo -e "Git: ${GREEN}$(git --version 2>/dev/null || echo 'Non install√©')${NC}"

# ==============================================================================
# 2. AUDIT D√âPENDANCES
# ==============================================================================
echo ""
echo -e "${YELLOW}üì¶ 2. AUDIT D√âPENDANCES${NC}"
echo "----------------------------------------"

# Backend
echo -e "${BLUE}Backend:${NC}"
if [ -f "server/package.json" ]; then
    echo -e "  ‚úÖ package.json trouv√©"
    cd server
    if [ -d "node_modules" ]; then
        echo -e "  ‚úÖ node_modules install√©"
        echo -e "  üìä D√©pendances: $(npm list --depth=0 | wc -l) packages"
    else
        echo -e "  ${RED}‚ùå node_modules manquant${NC}"
    fi
    cd ..
else
    echo -e "  ${RED}‚ùå package.json manquant${NC}"
fi

# Frontend
echo -e "${BLUE}Frontend:${NC}"
if [ -f "client/package.json" ]; then
    echo -e "  ‚úÖ package.json trouv√©"
    cd client
    if [ -d "node_modules" ]; then
        echo -e "  ‚úÖ node_modules install√©"
        echo -e "  üìä D√©pendances: $(npm list --depth=0 | wc -l) packages"
    else
        echo -e "  ${RED}‚ùå node_modules manquant${NC}"
    fi
    cd ..
else
    echo -e "  ${RED}‚ùå package.json manquant${NC}"
fi

# ==============================================================================
# 3. AUDIT BASE DE DONN√âES
# ==============================================================================
echo ""
echo -e "${YELLOW}üóÑÔ∏è  3. AUDIT BASE DE DONN√âES${NC}"
echo "----------------------------------------"

if [ -f "prisma/schema.prisma" ]; then
    echo -e "  ‚úÖ Schema Prisma trouv√©"

    # V√©rifier le client g√©n√©r√©
    if [ -d "generated/prisma" ]; then
        echo -e "  ‚úÖ Client Prisma g√©n√©r√©"
    else
        echo -e "  ${RED}‚ùå Client Prisma non g√©n√©r√©${NC}"
    fi

    # V√©rifier les migrations
    if [ -d "migrations" ]; then
        echo -e "  ‚úÖ Dossier migrations trouv√©"
        echo -e "  üìä Migrations: $(ls migrations/*.sql 2>/dev/null | wc -l) fichiers"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è  Dossier migrations manquant${NC}"
    fi
else
    echo -e "  ${RED}‚ùå Schema Prisma manquant${NC}"
fi

# ==============================================================================
# 4. AUDIT CODE
# ==============================================================================
echo ""
echo -e "${YELLOW}üíª 4. AUDIT CODE${NC}"
echo "----------------------------------------"

# Backend
echo -e "${BLUE}Backend:${NC}"
if [ -f "server/index-minimal.ts" ]; then
    echo -e "  ‚úÖ Serveur minimal trouv√©"
    echo -e "  üìä Routes: $(grep -c "router\." server/routes/*.ts 2>/dev/null || echo '0')"
else
    echo -e "  ${RED}‚ùå Serveur minimal manquant${NC}"
fi

# Frontend
echo -e "${BLUE}Frontend:${NC}"
if [ -f "client/src/App.tsx" ]; then
    echo -e "  ‚úÖ App.tsx trouv√©"
    echo -e "  üìä Pages: $(ls client/src/pages/*.tsx 2>/dev/null | wc -l) fichiers"
else
    echo -e "  ${RED}‚ùå App.tsx manquant${NC}"
fi

# ==============================================================================
# 5. AUDIT S√âCURIT√â
# ==============================================================================
echo ""
echo -e "${YELLOW}üîí 5. AUDIT S√âCURIT√â${NC}"
echo "----------------------------------------"

# Variables d'environnement
if [ -f ".env" ]; then
    echo -e "  ‚úÖ Fichier .env trouv√©"
    ENV_VARS=$(grep -c "=" .env 2>/dev/null || echo "0")
    echo -e "  üìä Variables: $ENV_VARS"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  Fichier .env manquant${NC}"
fi

# Secrets dans le code
SECRETS=$(grep -r "password\|secret\|key" server/ --include="*.ts" --include="*.js" 2>/dev/null | grep -v "TODO\|FIXME" | wc -l)
if [ "$SECRETS" -gt 0 ]; then
    echo -e "  ${RED}‚ö†Ô∏è  $SECRETS secrets potentiels dans le code${NC}"
else
    echo -e "  ‚úÖ Aucun secret d√©tect√© dans le code"
fi

# ==============================================================================
# 6. AUDIT PERFORMANCE
# ==============================================================================
echo ""
echo -e "${YELLOW}‚ö° 6. AUDIT PERFORMANCE${NC}"
echo "----------------------------------------"

# Taille des node_modules
BACKEND_SIZE=$(du -sh server/node_modules 2>/dev/null | cut -f1 || echo "N/A")
FRONTEND_SIZE=$(du -sh client/node_modules 2>/dev/null | cut -f1 || echo "N/A")
echo -e "  üì¶ Backend node_modules: $BACKEND_SIZE"
echo -e "  üì¶ Frontend node_modules: $FRONTEND_SIZE"

# ==============================================================================
# 7. AUDIT D√âPLOIEMENT
# ==============================================================================
echo ""
echo -e "${YELLOW}üöÄ 7. AUDIT D√âPLOIEMENT${NC}"
echo "----------------------------------------"

if [ -f "Dockerfile" ]; then
    echo -e "  ‚úÖ Dockerfile trouv√©"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  Dockerfile manquant${NC}"
fi

if [ -f "docker-compose.yml" ]; then
    echo -e "  ‚úÖ docker-compose.yml trouv√©"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  docker-compose.yml manquant${NC}"
fi

# ==============================================================================
# 8. R√âSUM√â ET RECOMMANDATIONS
# ==============================================================================
echo ""
echo -e "${BLUE}üìä R√âSUM√â DE L'AUDIT${NC}"
echo "----------------------------------------"

# Compter les erreurs
ERRORS=0
WARNINGS=0

# V√©rifications critiques
if [ ! -f "server/package.json" ]; then ((ERRORS++)); fi
if [ ! -f "client/package.json" ]; then ((ERRORS++)); fi
if [ ! -f "prisma/schema.prisma" ]; then ((ERRORS++)); fi
if [ ! -d "generated/prisma" ]; then ((WARNINGS++)); fi
if [ ! -f ".env" ]; then ((WARNINGS++)); fi

echo -e "  ${RED}‚ùå Erreurs critiques: $ERRORS${NC}"
echo -e "  ${YELLOW}‚ö†Ô∏è  Avertissements: $WARNINGS${NC}"

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Projet pr√™t pour le d√©veloppement${NC}"
else
    echo -e "${RED}‚ùå Projet n√©cessite des corrections${NC}"
fi

echo ""
echo -e "${BLUE}üéØ RECOMMANDATIONS${NC}"
echo "----------------------------------------"

if [ ! -d "generated/prisma" ]; then
    echo -e "  üîß G√©n√©rer le client Prisma: npx prisma generate"
fi

if [ ! -f ".env" ]; then
    echo -e "  üîß Cr√©er le fichier .env: cp env.example .env"
fi

if [ ! -d "server/node_modules" ]; then
    echo -e "  üì¶ Installer les d√©pendances backend: cd server && npm install"
fi

if [ ! -d "client/node_modules" ]; then
    echo -e "  üì¶ Installer les d√©pendances frontend: cd client && npm install"
fi

echo ""
echo -e "${GREEN}‚úÖ Audit termin√©${NC}"
