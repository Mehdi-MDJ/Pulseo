// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// NextAuth.js Models (générés automatiquement)
// ==============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(NURSE)
  establishmentId String?

  accounts      Account[]
  sessions      Session[]

  // Relations métier
  nurseProfile     NurseProfile?
  establishmentProfile EstablishmentProfile?
  applications     MissionApplication[]
  contracts        Contract[]
  notifications    Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==============================================================================
// Modèles métier NurseLink AI
// ==============================================================================

model NurseProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])

  specializations   String[] // Array PostgreSQL
  experience        Int      // Années d'expérience
  certifications   String[]
  availability      Json?    // Horaires de disponibilité
  hourlyRate        Decimal?
  rating            Decimal  @default(0)
  missionsCompleted Int      @default(0)
  level             Int      @default(1)
  rank              String   @default("Débutant")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EstablishmentProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])

  name            String
  type            EstablishmentType
  address         String
  phone           String?
  specialties     String[]
  capacity        Int?
  description     String?

  // Relations
  missions        Mission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mission {
  id              String   @id @default(cuid())
  title           String
  description     String
  establishmentId String
  establishment   EstablishmentProfile @relation(fields: [establishmentId], references: [id])

  // Détails de la mission
  specializations String[]
  duration        Int      // Heures
  hourlyRate      Decimal
  startDate       DateTime
  endDate         DateTime?
  location        String
  requirements    String?

  // Statut
  status          MissionStatus @default(OPEN)
  applications    MissionApplication[]
  contracts       Contract[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MissionApplication {
  id        String   @id @default(cuid())
  missionId String
  mission   Mission  @relation(fields: [missionId], references: [id])
  nurseId   String
  nurse     User     @relation(fields: [nurseId], references: [id])

  // Détails de la candidature
  coverLetter String?
  proposedRate Decimal?
  status      ApplicationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([missionId, nurseId])
}

model Contract {
  id                String   @id @default(cuid())
  missionId         String
  mission           Mission  @relation(fields: [missionId], references: [id])
  nurseId           String
  nurse             User     @relation(fields: [nurseId], references: [id])

  // Détails du contrat
  startDate         DateTime
  endDate           DateTime?
  hourlyRate        Decimal
  totalHours        Int
  totalAmount       Decimal

  // Statut
  status            ContractStatus @default(DRAFT)
  signedAt          DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  title     String
  message   String
  type      NotificationType
  read      Boolean  @default(false)

  createdAt DateTime @default(now())
}

// ==============================================================================
// Enums
// ==============================================================================

enum UserRole {
  NURSE
  ESTABLISHMENT
  ADMIN
}

enum EstablishmentType {
  HOSPITAL
  CLINIC
  NURSING_HOME
  PRIVATE_PRACTICE
}

enum MissionStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ContractStatus {
  DRAFT
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum NotificationType {
  MISSION_APPLICATION
  CONTRACT_UPDATE
  SYSTEM_MESSAGE
  REMINDER
}
