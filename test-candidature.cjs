const { Database } = require('better-sqlite3');
const path = require('path');

// Connexion √† la base de donn√©es
const dbPath = path.join(__dirname, 'server', 'database.sqlite');
const db = new Database(dbPath);

console.log('üîß Test de cr√©ation de candidature et g√©n√©ration de contrat');

try {
  // 1. Cr√©er un utilisateur infirmier
  console.log('1. Cr√©ation utilisateur infirmier...');
  const nurseUser = db.prepare(`
    INSERT INTO users (id, email, firstName, lastName, role, cguAccepted, createdAt)
    VALUES (?, ?, ?, ?, ?, ?, ?)
  `).run(
    'user-marie-candidat',
    'marie.candidat@test.fr',
    'Marie',
    'Candidat',
    'nurse',
    true,
    new Date().toISOString()
  );
  console.log('‚úÖ Utilisateur infirmier cr√©√©');

  // 2. Cr√©er un profil infirmier
  console.log('2. Cr√©ation profil infirmier...');
  const nurseProfile = db.prepare(`
    INSERT INTO nurseProfiles (userId, firstName, lastName, specializations, experience, hourlyRateMin, hourlyRateMax, address, city, postalCode, phone, certifications, isAvailable, createdAt)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `).run(
    'user-marie-candidat',
    'Marie',
    'Candidat',
    JSON.stringify(['cardiology']),
    5,
    25,
    35,
    'Paris',
    'Paris',
    '75001',
    '06 12 34 56 78',
    JSON.stringify(['Dipl√¥me d\'√âtat infirmier']),
    true,
    new Date().toISOString()
  );
  console.log('‚úÖ Profil infirmier cr√©√©');

  // 3. Cr√©er une candidature
  console.log('3. Cr√©ation candidature...');
  const application = db.prepare(`
    INSERT INTO missionApplications (missionId, nurseId, status, coverLetter, appliedAt, createdAt, updatedAt)
    VALUES (?, ?, ?, ?, ?, ?, ?)
  `).run(
    1, // missionId
    nurseProfile.lastInsertRowid, // nurseId
    'pending',
    'Je suis tr√®s int√©ress√©e par cette mission en cardiologie. J\'ai 5 ans d\'exp√©rience et je suis disponible imm√©diatement.',
    new Date().toISOString(),
    new Date().toISOString(),
    new Date().toISOString()
  );
  console.log('‚úÖ Candidature cr√©√©e avec ID:', application.lastInsertRowid);

  // 4. Accepter la candidature
  console.log('4. Acceptation de la candidature...');
  const updatedApplication = db.prepare(`
    UPDATE missionApplications
    SET status = ?, updatedAt = ?
    WHERE id = ?
  `).run('accepted', new Date().toISOString(), application.lastInsertRowid);
  console.log('‚úÖ Candidature accept√©e');

  // 5. Cr√©er un contrat
  console.log('5. Cr√©ation du contrat...');
  const contract = db.prepare(`
    INSERT INTO contracts (
      missionId, nurseId, establishmentId, contractNumber, title,
      startDate, endDate, hourlyRate, totalHours, totalAmount,
      contractContent, status, generatedAt, createdAt, updatedAt
    )
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `).run(
    1, // missionId
    nurseProfile.lastInsertRowid, // nurseId
    2, // establishmentId (profil √©tablissement existant)
    `CONTRACT-${Date.now()}`, // contractNumber
    'Contrat Mission Test Contrat', // title
    new Date('2025-07-15').getTime(), // startDate
    new Date('2025-07-20').getTime(), // endDate
    26, // hourlyRate
    40, // totalHours (5 jours * 8h)
    1040, // totalAmount (40h * 26‚Ç¨)
    JSON.stringify({
      terms: {
        hourlyRate: 26,
        startDate: '2025-07-15',
        endDate: '2025-07-20',
        shift: 'day',
        location: 'Paris',
        responsibilities: ['Soins infirmiers en cardiologie', 'Surveillance des patients'],
        requirements: ['Dipl√¥me d\'√âtat infirmier', 'Formation en cardiologie']
      },
      legalClauses: {
        confidentiality: true,
        insurance: true,
        compliance: true
      },
      signatures: {}
    }), // contractContent
    'generated', // status
    new Date().getTime(), // generatedAt
    new Date().getTime(), // createdAt
    new Date().getTime() // updatedAt
  );
  console.log('‚úÖ Contrat cr√©√© avec ID:', contract.lastInsertRowid);

  console.log('\nüéâ Test termin√© avec succ√®s !');
  console.log('üìã R√©sum√©:');
  console.log('- Utilisateur infirmier: user-marie-candidat');
  console.log('- Profil infirmier ID:', nurseProfile.lastInsertRowid);
  console.log('- Candidature ID:', application.lastInsertRowid);
  console.log('- Contrat ID:', contract.lastInsertRowid);

} catch (error) {
  console.error('‚ùå Erreur lors du test:', error.message);
  console.error(error);
} finally {
  db.close();
}
